import { Test, TestingModule } from '@nestjs/testing';
import { ExternalApiService } from './external-api.service';
import { HttpModule, HttpService } from '@nestjs/axios';
import { QuizesModule } from 'src/quizes/quizes.module';
import { RedisService } from 'src/redis/redis.service';
import { of, throwError } from 'rxjs';
import {
  InAppropriateUserMessageException,
  InternalServiceErrorException,
} from 'src/common/custom-exceptions/base-custom-exception';
import { QuizesService } from 'src/quizes/domain/quizes.service';
import { INITIAL_GREETING_FIXED_MESSAGE } from 'src/messages/domain/message-business-rule';

const httpServiceMock = {
  post: jest.fn(),
};
const quizServiceMock = {
  initializedQuizList: jest.fn(),
};

describe('ExternalApiService', () => {
  let service: ExternalApiService;
  let httpService: HttpService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      // imports: [HttpModule, QuizesModule],
      providers: [
        ExternalApiService,
        {
          provide: RedisService,
          useValue: {
            set: jest.fn(),
            get: jest.fn(),
            setJson: jest.fn(),
            getJson: jest.fn(),
          },
        },
        {
          provide: HttpService,
          useValue: httpServiceMock,
        },
        {
          provide: QuizesService,
          useValue: quizServiceMock,
        },
      ],
    }).compile();

    service = module.get<ExternalApiService>(ExternalApiService);
    httpService = module.get<HttpService>(HttpService);
  });

  afterAll(() => {
    jest.clearAllMocks();
  });

  /** Ï±óÎ¥áÍ≥ºÏùò 5Î≤àÏùò Ï±ÑÌåÖ ÎßàÎ¨¥Î¶¨ ÏßÅÌõÑÏóê Ï±óÎ¥á ÌîºÎìúÎ∞± ÏöîÏ≤≠ */
  describe('requestFeedback: [POST] /feedback', () => {
    it('API Ìò∏Ï∂úÏóê ÏÑ±Í≥µÌïòÏó¨ Ï±óÎ¥áÏùò ÎßàÏßÄÎßâÌé∏ÏßÄ Î∞òÌôòÌïúÎã§.', async () => {
      // arrange
      // act
      // assert
    });
    it('API Ìò∏Ï∂úÏóê Ïã§Ìå®ÌïòÏó¨ InternalServiceErrorException ÏòàÏô∏Î•º Î∞úÏÉùÏãúÌÇ®Îã§.', async () => {
      // arrange
      // act & assert
    });
  });
  /** ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏóê ÎåÄÌïú Ï±óÎ¥á Î¶¨Ïï°ÏÖò */
  describe('requestChatbotReactionFromConversation: [POST] /conversation', () => {
    it('API Ìò∏Ï∂úÏóê ÏÑ±Í≥µÌïòÏó¨ Í∞úÏÑ†Îêú ÌÄ¥Ï¶àÎ°ú Î≥ÄÍ≤ΩÎêúÎã§', async () => {
      // arrange
      const userNickname = 'ÌÖåÏä§Ìä∏';
      const mockQuizList = [
        'ÏÉùÏùºÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏπúÍµ¨Îì§Ïù¥Îûë ÏÑúÎ®πÌï¥ÏÑú Ï∂ïÌïòÎ∞õÏùÑ Ïàò ÏûàÏùÑÍπå Í±±Ï†ïÎèº...',
        'ÏπúÍµ¨Îì§ ÏÇ¨Ïù¥ÏóêÏÑú ÏÜåÏô∏Îêú ÎäêÎÇåÏù¥ Îì§Ïñ¥... ÌòπÏãú ÎÇòÎßå ÎπºÎÜìÍ≥† ÎÜÄÎ©¥ Ïñ¥Îñ°ÌïòÏßÄ? üò¢',
        'Ïù¥Î≤à ÏÉùÏùºÎèÑ Í∑∏ÎÉ• Ï°∞Ïö©Ìûà ÏßÄÎÇòÍ∞ÄÎ©¥ Ïñ¥Ï©åÏßÄ? ÎÑàÎ¨¥ ÏÜçÏÉÅÌï¥ÏÑú ÎßàÏùåÏù¥ ÏïÑÌåå... ü•∫',
        'ÎÇ¥Í∞Ä Ï¢Ä Îçî Îã§Í∞ÄÍ∞ÄÏïº Ìï†Íπå? Í∑∏Îü∞Îç∞ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥‚Ä¶ üò≠',
        'Ï†ïÎßê ÏÜåÏ§ëÌïú ÏπúÍµ¨Îì§ÏóêÍ≤å Ï∂ïÌïòÎ∞õÍ≥† Ïã∂ÏùÄÎç∞, Îßê Í∫ºÎÇ¥Í∏∞Í∞Ä ÏâΩÏßÄ ÏïäÏïÑ... üò¢',
      ];
      const mockMessageConversations = [
        `${INITIAL_GREETING_FIXED_MESSAGE(userNickname)} ÏÉùÏùºÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏπúÍµ¨Îì§Ïù¥Îûë ÏÑúÎ®πÌï¥ÏÑú Ï∂ïÌïòÎ∞õÏùÑ Ïàò ÏûàÏùÑÍπå Í±±Ï†ïÎèº...`, // bot
        'Ïôú Í±±Ï†ïÌïòÎäîÍ±∞Ïïº?', // user ÌÄ¥Ï¶à1 ÎãµÎ≥Ä

        'Í∑∏Í≤å... ÎÇò ÌòºÏûêÏÑú Îã§ Ï±ôÍ∏∞Í∏∞Ïóî ÎÑàÎ¨¥ ÌûòÎì§Ïñ¥ÏÑú üò¢ ÏπúÍµ¨Îì§ ÏÇ¨Ïù¥ÏóêÏÑú ÏÜåÏô∏Îêú ÎäêÎÇåÏù¥ Îì§Ïñ¥... ÌòπÏãú ÎÇòÎßå ÎπºÎÜìÍ≥† ÎÜÄÎ©¥ Ïñ¥Îñ°ÌïòÏßÄ? üò¢', // bot
        'ÎπºÎÜìÏùÑÏàòÎèÑÏûàÏßÄ... Î≠òÎòêÍ∑∏Îûò', // user ÌÄ¥Ï¶à2 ÎãµÎ≥Ä

        'Í∑∏Î†áÍ≤å ÎßêÌïòÎãàÍπå Îçî ÏÜçÏÉÅÌï¥... üòû ÏßÑÏßúÎ°ú ÎÇòÎßå ÌòºÏûê ÎÇ®ÏùÑÍπåÎ¥ê Î∂àÏïàÌïúÍ±∏... ü•∫ Ïù¥Î≤à ÏÉùÏùºÎèÑ Í∑∏ÎÉ• Ï°∞Ïö©Ìûà ÏßÄÎÇòÍ∞ÄÎ©¥ Ïñ¥Ï©åÏßÄ? ÎÑàÎ¨¥ ÏÜçÏÉÅÌï¥ÏÑú ÎßàÏùåÏù¥ ÏïÑÌåå... ü•∫', // bot
        'ÏÉùÏùº ÌòºÏûêÎ≥¥ÎÇ¥Î©¥ Ï¢ãÏßÄÏïäÏïÑ?', // user ÌÄ¥Ï¶à3 ÎãµÎ≥Ä

        'ÏïÑÎãà... ÌòºÏûê Î≥¥ÎÇ¥Îäî Í±¥ Ïã´ÏùÄ Í±∏üò≠ ÎÇ¥Í∞Ä Ï¢Ä Îçî Îã§Í∞ÄÍ∞ÄÏïº Ìï†Íπå? Í∑∏Îü∞Îç∞ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥‚Ä¶ üò≠', // bot
        'Í∞ôÏù¥ Î≥¥ÎÇ¥Í≥†Ïã∂ÏúºÎ©¥ Í∑∏ÎûòÏïºÏßÄ Î≠ê', // user ÌÄ¥Ï¶à 4 ÎãµÎ≥Ä
      ];
      const mockResponse = {
        data: {
          react: 'Í∑∏Î†áÍ≤å ÎßêÌïòÎãà Îçî Ïä¨ÌçºÏ†∏... üò¢',
          score: 0,
          improved_quiz: 'ÎÇ¥Í∞Ä ÎÇ¥ÏÉùÏùºÏù¥ÎùºÍ≥† ÏπúÍµ¨ÌïúÌÖå Î®ºÏ†Ä ÏïåÎ†§Ï§òÎèÑ Í¥úÏ∞ÆÏùÑÍπå..?',
          verification: true,
        },
      };
      const request = {
        chatbot_name: 'Ìà¨Îã•Ïù¥',
        user_nickname: userNickname,
        current_distance: 5,
        chatroom_id: 'test-chatroom-uuid',
        messageConversations: mockMessageConversations,
        quizList: mockQuizList,
      };
      (httpService.post as jest.Mock).mockReturnValueOnce(of(mockResponse));

      // act
      const result = await service.requestChatbotReactionFromConversation(request);

      // assert
      expect(result.react).toEqual('Í∑∏Î†áÍ≤å ÎßêÌïòÎãà Îçî Ïä¨ÌçºÏ†∏... üò¢');
      expect(result.improved_quiz).toEqual('ÎÇ¥Í∞Ä ÎÇ¥ÏÉùÏùºÏù¥ÎùºÍ≥† ÏπúÍµ¨ÌïúÌÖå Î®ºÏ†Ä ÏïåÎ†§Ï§òÎèÑ Í¥úÏ∞ÆÏùÑÍπå..?');
      expect(result.score).toEqual(0);
      expect(result.verification).toBeTruthy();
    });
    it('ÏûÖÎ†•Î©îÏãúÏßÄÏóê Î∂ÄÏ†ÅÏ†àÌïú Î¨∏Îß•Ïù¥ Í∞êÏßÄÎêòÏñ¥ InAppropriateUserMessageException ÏòàÏô∏Î•º Î∞úÏÉùÏãúÌÇ®Îã§', async () => {
      // arrange
      const inappropriateMessage = 'ÎÑà Ï†ïÎßê Î∞îÎ≥¥ Î©çÏ≤≠Ïù¥ Í∞ôÎã§.';
      const userNickname = 'ÌÖåÏä§Ìä∏';
      const mockQuizList = [
        'ÏÉùÏùºÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏπúÍµ¨Îì§Ïù¥Îûë ÏÑúÎ®πÌï¥ÏÑú Ï∂ïÌïòÎ∞õÏùÑ Ïàò ÏûàÏùÑÍπå Í±±Ï†ïÎèº...',
        'ÏπúÍµ¨Îì§ ÏÇ¨Ïù¥ÏóêÏÑú ÏÜåÏô∏Îêú ÎäêÎÇåÏù¥ Îì§Ïñ¥... ÌòπÏãú ÎÇòÎßå ÎπºÎÜìÍ≥† ÎÜÄÎ©¥ Ïñ¥Îñ°ÌïòÏßÄ? üò¢',
        'Ïù¥Î≤à ÏÉùÏùºÎèÑ Í∑∏ÎÉ• Ï°∞Ïö©Ìûà ÏßÄÎÇòÍ∞ÄÎ©¥ Ïñ¥Ï©åÏßÄ? ÎÑàÎ¨¥ ÏÜçÏÉÅÌï¥ÏÑú ÎßàÏùåÏù¥ ÏïÑÌåå... ü•∫',
        'ÎÇ¥Í∞Ä Ï¢Ä Îçî Îã§Í∞ÄÍ∞ÄÏïº Ìï†Íπå? Í∑∏Îü∞Îç∞ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥‚Ä¶ üò≠',
        'Ï†ïÎßê ÏÜåÏ§ëÌïú ÏπúÍµ¨Îì§ÏóêÍ≤å Ï∂ïÌïòÎ∞õÍ≥† Ïã∂ÏùÄÎç∞, Îßê Í∫ºÎÇ¥Í∏∞Í∞Ä ÏâΩÏßÄ ÏïäÏïÑ... üò¢',
      ];
      const mockMessageConversations = [
        `${INITIAL_GREETING_FIXED_MESSAGE(userNickname)} ÏÉùÏùºÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏπúÍµ¨Îì§Ïù¥Îûë ÏÑúÎ®πÌï¥ÏÑú Ï∂ïÌïòÎ∞õÏùÑ Ïàò ÏûàÏùÑÍπå Í±±Ï†ïÎèº...`, // bot
        'Ïôú Í±±Ï†ïÌïòÎäîÍ±∞Ïïº?', // user ÌÄ¥Ï¶à1 ÎãµÎ≥Ä

        'Í∑∏Í≤å... ÎÇò ÌòºÏûêÏÑú Îã§ Ï±ôÍ∏∞Í∏∞Ïóî ÎÑàÎ¨¥ ÌûòÎì§Ïñ¥ÏÑú üò¢ ÏπúÍµ¨Îì§ ÏÇ¨Ïù¥ÏóêÏÑú ÏÜåÏô∏Îêú ÎäêÎÇåÏù¥ Îì§Ïñ¥... ÌòπÏãú ÎÇòÎßå ÎπºÎÜìÍ≥† ÎÜÄÎ©¥ Ïñ¥Îñ°ÌïòÏßÄ? üò¢', // bot
        'ÎπºÎÜìÏùÑÏàòÎèÑÏûàÏßÄ... Î≠òÎòêÍ∑∏Îûò', // user ÌÄ¥Ï¶à2 ÎãµÎ≥Ä

        'Í∑∏Î†áÍ≤å ÎßêÌïòÎãàÍπå Îçî ÏÜçÏÉÅÌï¥... üòû ÏßÑÏßúÎ°ú ÎÇòÎßå ÌòºÏûê ÎÇ®ÏùÑÍπåÎ¥ê Î∂àÏïàÌïúÍ±∏... ü•∫ Ïù¥Î≤à ÏÉùÏùºÎèÑ Í∑∏ÎÉ• Ï°∞Ïö©Ìûà ÏßÄÎÇòÍ∞ÄÎ©¥ Ïñ¥Ï©åÏßÄ? ÎÑàÎ¨¥ ÏÜçÏÉÅÌï¥ÏÑú ÎßàÏùåÏù¥ ÏïÑÌåå... ü•∫', // bot
        'ÏÉùÏùº ÌòºÏûêÎ≥¥ÎÇ¥Î©¥ Ï¢ãÏßÄÏïäÏïÑ?', // user ÌÄ¥Ï¶à3 ÎãµÎ≥Ä

        'ÏïÑÎãà... ÌòºÏûê Î≥¥ÎÇ¥Îäî Í±¥ Ïã´ÏùÄ Í±∏üò≠ ÎÇ¥Í∞Ä Ï¢Ä Îçî Îã§Í∞ÄÍ∞ÄÏïº Ìï†Íπå? Í∑∏Îü∞Îç∞ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥‚Ä¶ üò≠', // bot
        inappropriateMessage, // Î∂ÄÏ†ÅÏ†àÌïúÎ©îÏãúÏßÄ
      ];
      const mockResponse = {
        data: {
          react: '',
          improved_quiz: '',
          verification: false,
        },
      };
      const request = {
        chatbot_name: 'Ìà¨Îã•Ïù¥',
        user_nickname: userNickname,
        current_distance: 5,
        chatroom_id: 'test-chatroom-uuid',
        messageConversations: mockMessageConversations,
        quizList: mockQuizList,
      };
      (httpService.post as jest.Mock).mockReturnValueOnce(of(mockResponse));

      // act & assert
      await expect(service.requestChatbotReactionFromConversation(request)).rejects.toThrow(
        InAppropriateUserMessageException,
      );
    });
    it('API Ìò∏Ï∂úÏóê Ïã§Ìå®ÌïòÏó¨ InternalServiceErrorException ÏòàÏô∏Î•º Î∞úÏÉùÏãúÌÇ®Îã§', async () => {
      // arrange
      const userNickname = 'ÌÖåÏä§Ìä∏';
      const mockQuizList = [
        'ÏÉùÏùºÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏπúÍµ¨Îì§Ïù¥Îûë ÏÑúÎ®πÌï¥ÏÑú Ï∂ïÌïòÎ∞õÏùÑ Ïàò ÏûàÏùÑÍπå Í±±Ï†ïÎèº...',
        'ÏπúÍµ¨Îì§ ÏÇ¨Ïù¥ÏóêÏÑú ÏÜåÏô∏Îêú ÎäêÎÇåÏù¥ Îì§Ïñ¥... ÌòπÏãú ÎÇòÎßå ÎπºÎÜìÍ≥† ÎÜÄÎ©¥ Ïñ¥Îñ°ÌïòÏßÄ? üò¢',
        'Ïù¥Î≤à ÏÉùÏùºÎèÑ Í∑∏ÎÉ• Ï°∞Ïö©Ìûà ÏßÄÎÇòÍ∞ÄÎ©¥ Ïñ¥Ï©åÏßÄ? ÎÑàÎ¨¥ ÏÜçÏÉÅÌï¥ÏÑú ÎßàÏùåÏù¥ ÏïÑÌåå... ü•∫',
        'ÎÇ¥Í∞Ä Ï¢Ä Îçî Îã§Í∞ÄÍ∞ÄÏïº Ìï†Íπå? Í∑∏Îü∞Îç∞ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥‚Ä¶ üò≠',
        'Ï†ïÎßê ÏÜåÏ§ëÌïú ÏπúÍµ¨Îì§ÏóêÍ≤å Ï∂ïÌïòÎ∞õÍ≥† Ïã∂ÏùÄÎç∞, Îßê Í∫ºÎÇ¥Í∏∞Í∞Ä ÏâΩÏßÄ ÏïäÏïÑ... üò¢',
      ];
      const mockMessageConversations = [
        `${INITIAL_GREETING_FIXED_MESSAGE(userNickname)} ÏÉùÏùºÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏπúÍµ¨Îì§Ïù¥Îûë ÏÑúÎ®πÌï¥ÏÑú Ï∂ïÌïòÎ∞õÏùÑ Ïàò ÏûàÏùÑÍπå Í±±Ï†ïÎèº...`, // bot
        'Ïôú Í±±Ï†ïÌïòÎäîÍ±∞Ïïº?', // user ÌÄ¥Ï¶à1 ÎãµÎ≥Ä

        'Í∑∏Í≤å... ÎÇò ÌòºÏûêÏÑú Îã§ Ï±ôÍ∏∞Í∏∞Ïóî ÎÑàÎ¨¥ ÌûòÎì§Ïñ¥ÏÑú üò¢ ÏπúÍµ¨Îì§ ÏÇ¨Ïù¥ÏóêÏÑú ÏÜåÏô∏Îêú ÎäêÎÇåÏù¥ Îì§Ïñ¥... ÌòπÏãú ÎÇòÎßå ÎπºÎÜìÍ≥† ÎÜÄÎ©¥ Ïñ¥Îñ°ÌïòÏßÄ? üò¢', // bot
        'ÎπºÎÜìÏùÑÏàòÎèÑÏûàÏßÄ... Î≠òÎòêÍ∑∏Îûò', // user ÌÄ¥Ï¶à2 ÎãµÎ≥Ä

        'Í∑∏Î†áÍ≤å ÎßêÌïòÎãàÍπå Îçî ÏÜçÏÉÅÌï¥... üòû ÏßÑÏßúÎ°ú ÎÇòÎßå ÌòºÏûê ÎÇ®ÏùÑÍπåÎ¥ê Î∂àÏïàÌïúÍ±∏... ü•∫ Ïù¥Î≤à ÏÉùÏùºÎèÑ Í∑∏ÎÉ• Ï°∞Ïö©Ìûà ÏßÄÎÇòÍ∞ÄÎ©¥ Ïñ¥Ï©åÏßÄ? ÎÑàÎ¨¥ ÏÜçÏÉÅÌï¥ÏÑú ÎßàÏùåÏù¥ ÏïÑÌåå... ü•∫', // bot
        'ÏÉùÏùº ÌòºÏûêÎ≥¥ÎÇ¥Î©¥ Ï¢ãÏßÄÏïäÏïÑ?', // user ÌÄ¥Ï¶à3 ÎãµÎ≥Ä

        'ÏïÑÎãà... ÌòºÏûê Î≥¥ÎÇ¥Îäî Í±¥ Ïã´ÏùÄ Í±∏üò≠ ÎÇ¥Í∞Ä Ï¢Ä Îçî Îã§Í∞ÄÍ∞ÄÏïº Ìï†Íπå? Í∑∏Îü∞Îç∞ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥‚Ä¶ üò≠', // bot
        'Í∞ôÏù¥ Î≥¥ÎÇ¥Í≥†Ïã∂ÏúºÎ©¥ Í∑∏ÎûòÏïºÏßÄ Î≠ê', // user ÌÄ¥Ï¶à 4 ÎãµÎ≥Ä
      ];
      const request = {
        chatbot_name: 'Ìà¨Îã•Ïù¥',
        user_nickname: userNickname,
        current_distance: 5,
        chatroom_id: 'test-chatroom-uuid',
        messageConversations: mockMessageConversations,
        quizList: mockQuizList,
      };
      (httpService.post as jest.Mock).mockReturnValueOnce(
        throwError(() => new InternalServiceErrorException('AI ÏÑúÎ≤Ñ ÏùëÎãµÏò§Î•ò')),
      );
      // act & assert
      await expect(service.requestChatbotReactionFromConversation(request)).rejects.toThrow(
        InternalServiceErrorException,
      );
    });
  });
  /** Ï±ÑÌåÖÎ£∏ ÏûÖÏû•Ïãú Ï±óÎ¥áÏùò ÌÄ¥Ï¶à5Í∞ú Ï¥àÍ∏∞ÏÉùÏÑ± */
  describe('requestCreateSituation: [POST] /situation Ïô∏Î∂Ä API Ìò∏Ï∂ú', () => {
    it('API Ìò∏Ï∂úÏóê ÏÑ±Í≥µÌïòÏó¨ quiz_listÏôÄ first_quizÎ•º Î∞òÌôòÌïúÎã§', async () => {
      // arrange
      const mockQuizList = [
        'ÌïôÍµêÏóêÏÑú Ìï≠ÏÉÅ Í∞ôÏù¥ Îã§ÎãàÎçò ÏπúÍµ¨Í∞Ä Í∞ëÏûêÍ∏∞ ÎÇòÎ•º ÌîºÌïòÍ∏∞ ÏãúÏûëÌï¥ÏÑú ÎßàÏùåÏù¥ ÎÑàÎ¨¥ ÏïÑÌåå...',
        'Ïôú Í∑∏Îü∞ÏßÄ Î¨ºÏñ¥Î≥¥Í≥† Ïã∂Ïñ¥ Í∑ºÎç∞ Ïñ¥ÎñªÍ≤å ÎßêÌï¥Ïïº Ìï†ÏßÄ Î™®Î•¥Í≤†Ïñ¥ üò¢',
        'ÌòπÏãú ÎÇ¥Í∞Ä Î≠ò ÏûòÎ™ªÌñàÎÇò Ïã∂Ïñ¥ÏÑú ÏûêÍæ∏ ÏÉùÍ∞ÅÌïòÍ≤å Îèº... üòî',
        'Îã§Î•∏ ÏπúÍµ¨Îì§Ïù¥Îûë Ïûò ÏßÄÎÇ¥Îäî Í±∏ Î≥¥Î©¥ Îçî ÏÑúÏö¥ÌïòÍ≥† Ïô∏Î°úÏõåÏ†∏... üò¢',
        'Ïù¥Î†áÍ≤åÍπåÏßÄ ÏÜåÏã¨Ìï¥ÏßÄÎäî Í≤å ÎßûÎäî Í±¥ÏßÄ ÎÑàÎ¨¥ ÌòºÎûÄÏä§Îü¨Ïõå... üò¢',
      ];
      const mockResponse = {
        data: {
          quiz_list: mockQuizList,
        },
      };

      (httpService.post as jest.Mock).mockReturnValueOnce(of(mockResponse));
      const request = {
        chatroom_id: 'test-chatroom-uuid',
        chatbot_name: 'Ìà¨Îã•Ïù¥',
        user_nickname: 'ÌÖåÏä§Ìä∏ÏÇ¨Ïö©Ïûê',
      };

      // act
      const result = await service.requestCreateSituation(request);

      // assert
      expect(result.quiz_list).toEqual(mockQuizList);
      expect(result.first_quiz).toBe(mockQuizList[0]);
    });

    it('API Ìò∏Ï∂úÏóê Ïã§Ìå®ÌïòÏó¨ InternalServiceErrorException ÏòàÏô∏Î•º Î∞úÏÉùÏãúÌÇ®Îã§.', async () => {
      // arrange
      (httpService.post as jest.Mock).mockReturnValueOnce(
        throwError(() => new InternalServiceErrorException('AI ÏÑúÎ≤Ñ ÏùëÎãµÏò§Î•ò')),
      );
      const request = {
        chatroom_id: 'test-chatroom-uuid',
        user_nickname: 'ÌÖåÏä§Ìä∏ÏÇ¨Ïö©Ïûê',
        chatbot_name: 'Ìà¨Îã•Ïù¥',
      };

      // act & assert
      await expect(service.requestCreateSituation(request)).rejects.toThrow(
        InternalServiceErrorException,
      );
    });
  });
});
