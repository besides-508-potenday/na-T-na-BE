// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  nickname String
  created_at DateTime @default(now())  

  // 외래키 관계
  chatroom_participants ChatroomParticipant[] // 1:N
  messages ChatMessage[] // 1:N
}

model Chatbot {
  id Int @id @default(autoincrement())
  name String @unique
  speciality String 
  is_unknown Boolean @default(false)
  created_at DateTime @default(now())  
  personality String @default("")

  // 외래키 관계
  chatroom_participants ChatroomParticipant[] // 1:N
  messages ChatMessage[] // 1:N
}


model Chatroom {
  id String @id @default(uuid())

  is_finished Boolean @default(false)
  current_distance Int @default(5)
  heart_life Int @default(5)
  letter String
  from_chatbot String?
  turn_count Int @default(5)
  created_at DateTime @default(now())

  // 외래키 관계
  participants ChatroomParticipant[] // 1:N
  quizes Quiz[] // 1:N
  messages ChatMessage[] // 1:N
}

/* 채팅방 참여인원 - 채팅방/챗봇/유저 연결 테이블 */
model ChatroomParticipant {
  id String @id @default(uuid())

  // FK 컬럼
  chatroom_id String
  user_id String
  chatbot_id Int

  // 외래키 관계
  chatroom Chatroom @relation(fields: [chatroom_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id])
}


model ChatMessage {
  id String @id @default(uuid())

  sender_type SenderType @default(USER)
  content String
  createdAt DateTime @default(now())


  // FK 컬럼
  chatroom_id String
  chatbot_id Int
  user_id String

  // 외래키 관계
  chatroom Chatroom @relation(fields: [chatroom_id], references: [id])
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

enum SenderType {
  USER
  BOT
}

model Quiz {
  id String @id @default(uuid()) 

  sequence Int
  quiz String
  createdAt DateTime @default(now())

  // FK 관계
  chatroom_id String

  // 외래키 관계
  chatroom Chatroom @relation(fields: [chatroom_id], references: [id])

  // 복합키 (chatroom_id, sequence)
  @@unique([chatroom_id, sequence], map: "chatroom_id_sequence")
}